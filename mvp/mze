#!/usr/bin/env python3
#
# Copyright 2021 Maksym Medvied
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import sys
import json
import uuid
import sqlite3

from pathlib import Path
from typing import Optional

from aiohttp import web


class RecordId:
    record_id: Optional[uuid.UUID]
    version_id: Optional[uuid.UUID]

    def __init__(self, record_id: Optional[uuid.UUID] = None,
                 version_id: Optional[uuid.UUID] = None) -> None:
        self.record_id = record_id
        self.version_id = version_id

    def generate_random(self) -> None:
        self.record_id = uuid.uuid4()
        self.version_id = uuid.uuid4()


class Record:
    rid: RecordId
    tags: Optional[list[str]]
    attributes: Optional[dict[str, str]]
    data: str


class Records:
    def __init__(self) -> None:
        self.con = sqlite3.connect('/tmp/records.sqlite3')

    def insert(self, rec: Record) -> None:
        if rec.rid is None:
            rec.rid = RecordId()
            rec.rid.generate_random()
        if rec.tags is None:
            rec.tags = []
        if rec.attributes is None:
            rec.attributes = {}
        with self.con:
            cur = self.con.cursor()
            cur.execute('INSERT INTO records VALUES(?, ?, ?, ?, ?);',
                        (str(rec.rid.record_id),
                         str(rec.rid.version_id),
                         json.dumps(rec.tags),
                         json.dumps(rec.attributes),
                         rec.data))

    def remove(self, rid: RecordId) -> None:
        with self.con:
            cur = self.con.cursor()
            cur.execute('DELETE FROM records WHERE '
                        'record_id = ? AND version_id = ?;',
                        (str(rid.record_id), str(rid.version_id)))

    def lookup(self, rid: RecordId) -> Record:
        with self.con:
            cur = self.con.cursor()
            cur.execute('SELECT * FROM records WHERE '
                        'record_id = ? AND version_id = ?;',
                        (str(rid.record_id), str(rid.version_id)))
            rows = cur.fetchall()
            assert len(rows) == 1
            return self._row2record(rows[0])

    def all_records(self) -> list[Record]:
        cur = self.con.cursor()
        cur.execute('SELECT * FROM records;')
        return [self._row2record(row) for row in cur.fetchall()]

    def _row2record(self, row: sqlite3.Row) -> Record:
        rec = Record()
        rec.rid = RecordId(uuid.UUID(row[0]), uuid.UUID(row[1]))
        rec.tags = json.loads(row[2])
        rec.attributes = json.loads(row[3])
        rec.data = row[4]
        return rec

    @staticmethod
    def mkfs() -> None:
        Path('/tmp/records.sqlite3').unlink(missing_ok=True)
        con = sqlite3.connect('/tmp/records.sqlite3')
        with con:
            cur = con.cursor()
            cur.execute('CREATE TABLE records ('
                        'record_id TEXT, '
                        'version_id TEXT, '
                        'tags TEXT, '
                        'attributes TEXT, '
                        'data TEXT);')


class Blobs:
    def __init__(self) -> None:
        pass

    def put(self, uuid: uuid.UUID, blob: bytes) -> None:
        with open(f'/tmp/{uuid}', 'wb') as f:
            f.write(blob)

    def get(self, uuid: uuid.UUID) -> bytes:
        with open(f'/tmp/{uuid}', 'b') as f:
            return f.read()

    def remove(self, uuid: uuid.UUID) -> None:
        Path(f'/tmp/{uuid}').unlink()


async def search(request: web.Request) -> web.StreamResponse:
    all_records = request.app['records'].all_records()
    rows = ['<tr>' + ''.join([
        '<td>' + s + '</td>'
        for s in (str(rec.rid.record_id), str(rec.rid.version_id),
                  ', '.join(rec.tags),
                  ', '.join(f'{k}={v}' for k, v in rec.attributes.items()),
                  f'<a href="/server/edit?record_id={rec.rid.record_id}'
                  f'&version_id={rec.rid.version_id}">edit</a>',
                  f'<a href="/server/view?record_id={rec.rid.record_id}'
                  f'&version_id={rec.rid.version_id}">view</a>',
                  f'<a href="/server/remove?record_id={rec.rid.record_id}'
                  f'&version_id={rec.rid.version_id}">remove</a>')
    ]) + '</tr>'
            for rec in all_records]
    html = f'''
<html>
<head>
    <meta content="text/html;charset=utf-8" http-equiv="Content-Type">
    <meta content="utf-8" http-equiv="encoding">
    <link rel="icon" href="data:;base64,iVBORw0KGgo=">  <!-- blank favicon -->
</head>
<body>
<a href="/server/edit?action=create">add new</a><br>
<table border="1px"><caption>{len(all_records)} records.</caption>
<thead>
<tr>
    <th scope="col">record_id</th>
    <th scope="col">version_id</th>
    <th scope="col">tags</th>
    <th scope="col">attributes</th>
    <th scope="col">Edit</th>
    <th scope="col">View</th>
    <th scope="col">Remove</th>
</tr>
</thead>
<tbody>
{''.join(rows)}
</tbody>
</body>
</html>
'''.lstrip()
    return web.Response(body=html, content_type='text/html')


def request2record(request: web.Request) -> Record:
    query = {k: v for k, v in request.query.items()}
    if 'record_id' not in query or 'version_id' not in query:
        raise web.HTTPBadRequest(text='record_id and/or version_id '
                                  'is missing')
    rid = RecordId(uuid.UUID(query['record_id']),
                   uuid.UUID(query['version_id']))
    return request['records'].lookup(rid)


async def edit(request: web.Request) -> web.StreamResponse:
    query = {k: v for k, v in request.query.items()}
    if query['action'] == 'create':
        rec = Record()
        rec.rid = RecordId()
        rec.rid.generate_random()
        rec.tags = []
        rec.attributes = {}
        rec.data = ''
    else:
        rec = request2record(request)
    tags = '\n'.join(rec.tags)
    attributes = '\n'.join(f'{k}={v}' for k, v in rec.attributes)
    html = f'''
<html>
<head>
    <meta content="text/html;charset=utf-8" http-equiv="Content-Type">
    <meta content="utf-8" http-equiv="encoding">
    <link rel="icon" href="data:;base64,iVBORw0KGgo=">  <!-- blank favicon -->
</head>
<body>
<form action="/server/add" >
<table border="1px">
<tbody>
<tr><td>record_id</td>
<td><input type="text" id="record_id" value="{rec.rid.record_id}" /></td></tr>
<tr><td>version_id</td>
<td><input type="text" id="version_id" value="{rec.rid.version_id}" /></td></tr>
<tr><td>tags</td>
<td><textarea id="tags" rows=10>{tags}</textarea></td></tr>
<tr><td>attributes</td>
<td><textarea id="attributes" rows=10>{attributes}</textarea></td></tr>
<tr><td>data</td>
</tr>
</tbody>
</table>
</form>
</body>
</html>
'''.lstrip()
    return web.Response(body=html, content_type='text/html')


async def view(request: web.Request) -> web.StreamResponse:
    rec = request2record(request)
    return web.FileResponse(f'/tmp/{rec.data}')


async def view(request: web.Request) -> web.StreamResponse:
    rec = request2record(request)
    return web.Response(body=html, content_type=f'{rec}')


def mkfs() -> None:
    print('Running mkfs')
    Records.mkfs()


def server() -> None:
    mkfs()
    print('Running server')
    app = web.Application()
    app.add_routes([
        web.get('/server/search', search),
        web.get('/server/edit', edit),
        web.get('/server/view', view),
        web.get('/server/remove', remove),
    ])
    app['records'] = Records()
    app['blobs'] = Blobs()
    web.run_app(app, port=80)


def main() -> None:
    if len(sys.argv) > 1:
        if sys.argv[1] == 'mkfs':
            mkfs()
        elif sys.argv[1] == 'server':
            server()


if __name__ == '__main__':
    main()
